#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass DJCTeXarticle
\begin_preamble
%\usepackage[cm-default]{fontspec}
\usepackage{xunicode}
\usepackage{xltxtra}
%\setmainfont[BoldFont=SimHei,ItalicFont=KaiTi_GB2312]{SimSun}
%\setsansfont[BoldFont=SimHei]{KaiTi_GB2312}
\setmainfont[BoldFont=SimHei,ItalicFont=SimHei]{SimSun}
\setsansfont[BoldFont=SimHei]{SimHei}
%\setmonofont{NSimSun}
\XeTeXlinebreaklocale "zh"
\XeTeXlinebreakskip = 0pt plus 1pt

\usepackage{upquote}

\usepackage{xcolor}

\usepackage[formats]{listings}

%\lstset{%language=Matlab,%
%	basicstyle={\lstbasicfont\small},
%	keywordstyle=\color[rgb]{0,0,1},          % keywords
%	commentstyle=\color[rgb]{0.133,0.545,0.133},  % comments
%	stringstyle=\color[rgb]{0.627,0.126,0.941}, % strings
%tabsize=4,
%showstringspaces=false,
%breaklines=true,
%breakindent=0pt,
%morekeywords={git}
%}

\lstset{language=bash,%
basicstyle=\ttfamily\small,
keywordstyle=\color{blue}\bfseries,          % keywords
%	commentstyle=\color[rgb]{0.133,0.545,0.133},  % comments
%	stringstyle=\color[rgb]{0.627,0.126,0.941}, % strings
tabsize=4,
%upquote=false, % For straight quote
%escapechar=\%,
showstringspaces=false,
breaklines=true,
breakindent=0pt,
morekeywords={git, cd, ls, mkdir, cp, rm}
}
\end_preamble
\use_default_options true
\language british
\inputencoding utf8-plain
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Git使用指南
\end_layout

\begin_layout Author
Dazhi Jiang
\end_layout

\begin_layout Date
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
today
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
本文介绍如何使用Git，文档的编写与维护本身就使用了Git。第一部分介绍了我是如何从一无所知的开始使用Git。其中应该有很多的失败。下面开始吧。
\end_layout

\begin_layout Section
The First Try
\end_layout

\begin_layout Subsection
创建一份文档
\end_layout

\begin_layout Standard
例如，这篇文档。
\end_layout

\begin_layout Subsection
建立项目仓库
\end_layout

\begin_layout Standard
进入本文档所在目录，输入如下命令：
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\begin_layout Plain Layout

$ git init
\end_layout

\begin_layout Plain Layout

$ git add .
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
这样就会得到一个.git目录。然后运行命令：
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\begin_layout Plain Layout

$ git commit -m "The initial document (built in LyX) of the project: DJ
 Learning Git"
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset

 就将文档提交到仓库中。
\end_layout

\begin_layout Standard
在这之前可以进行一些自我介绍（这一步可以在一开始的时候就做）：
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\begin_layout Plain Layout

$ git config --global user.name "Dazhi Jiang"
\end_layout

\begin_layout Plain Layout

$ git config --global user.email jiangdzh@gmail.com
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
在这个项目中，我可能会用到一些临时性的文档，但是我不希望这些文档出现在项目仓库中，为了简化步骤，可以采用如下方法：
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\begin_layout Plain Layout

$ echo "tmp" > .gitignore
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
与远程仓库 (Remote Repository) 交互使用
\end_layout

\begin_layout Subsubsection
建立远程仓库
\end_layout

\begin_layout Paragraph
GitHub
\end_layout

\begin_layout Standard
首先，你需要建立一个远程仓库。比较好的有GitHub和Google Code。GitHub主要用Rails实现，其顾名思义提供了Git库的远程托管服务。只要在
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://github.com
\end_layout

\end_inset

上注册你就免费拥有300Mb大小的空间，用于存储你的项目。对于一般用户，只能建立公共项目，这些项目是任何人都可以访问与fork的。
\end_layout

\begin_layout Standard
注册完用户后，登录，之后要做的第一件事就是要产生并提交你的SSH key。详细步骤可以参考GitHub上的帮助。
\end_layout

\begin_layout Standard
首先，删除已有的SSH Key，命令如下：
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\begin_layout Plain Layout

$ cd ~/.ssh 
\end_layout

\begin_layout Plain Layout

$ ls 
\end_layout

\begin_layout Plain Layout

config  id_rsa  id_rsa.pub  known_hosts 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

$ mkdir key_backup 
\end_layout

\begin_layout Plain Layout

$ cp id_rsa* key_backup 
\end_layout

\begin_layout Plain Layout

$ rm id_rsa*
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
下面就可以产生SSH Key，如下所示：
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\begin_layout Plain Layout

$ ssh-keygen -t rsa -C "your_email_address@gmail.com" 
\end_layout

\begin_layout Plain Layout

Generating public/private rsa key pair.
 Enter file in which to save the key (/c/Users/Tekkub/.ssh/id_rsa): Enter
 passphrase (empty for no passphrase): Enter same passphrase again: Your
 identification has been saved in /c/Users/Tekkub/.ssh/id_rsa.
 Your public key has been saved in /c/Users/Tekkub/.ssh/id_rsa.pub.
 The key fingerprint is: e8:ae:60:8f:38:c2:98:1d:6d:84:60:8c:9e:dd:47:81
 your_email_address@gmail.com
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
这个过程当中，会提示输入密码，这个密码就是以后每次提交项目时需要输入的密码。之后就可以将这个SSH Key提交到GitHub上了。最后可以运行下面代码进行测试。
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\begin_layout Plain Layout

$ ssh git@github.com 
\end_layout

\begin_layout Plain Layout

Hi tekkub! You've successfully authenticated, but GitHub does not provide
 shell access.
 Connection to github.com closed.
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Gitorious
\end_layout

\begin_layout Paragraph
Google Code
\end_layout

\begin_layout Paragraph
SVN
\end_layout

\begin_layout Subsubsection
提交 (Push) 项目
\end_layout

\begin_layout Standard
运行如下代码提交你的项目到远程仓库，
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\begin_layout Plain Layout

$ git commit -a -m 'Some comments'
\end_layout

\begin_layout Plain Layout

$ git remote add origin git@github.com:Khaos/DJ-Learn-Git.git
\end_layout

\begin_layout Plain Layout

$ git push origin master
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
值得一提的是，如果在同一台机器再次提交项目，上述命令中的第二行可以省略（？）。
\end_layout

\begin_layout Standard
另外，你也可以命名多个远程仓库，这样做的原因可能是项目由于某些原因而转移的存储地址，下面是相关命令，
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\begin_layout Plain Layout

$ git remote add origin1 git@gitorious.org.com:Khaos/DJ-Learn-Git.git
\end_layout

\begin_layout Plain Layout

$ git push origin1 master
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
克隆 (Clone) 项目
\end_layout

\begin_layout Standard
下面命令可以让你从远程仓库中克隆项目至本地机器，
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\begin_layout Plain Layout

$ git svn clone --username JiangDZH@gmail.com https://learngit.googlecode.com/svn/t
runk
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
获取 (Fetch) 项目
\end_layout

\begin_layout Subsubsection
合并 (Merge) 项目
\end_layout

\begin_layout Subsubsection
获取且合并 (Pull) 项目
\end_layout

\begin_layout Section
在Dropbox上发布备份项目
\end_layout

\begin_layout Subsection
安装Dropbox
\end_layout

\begin_layout Subsection
与Git交互
\end_layout

\begin_layout Standard
首先进入你的本地项目目录，运行
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\begin_layout Plain Layout

$ git clone --bare .
 PATH_TO_YOUR_LOCAL_DROPBOX/some-project.git
\end_layout

\begin_layout Plain Layout

$ git remote add dropbox PATH_TO_YOUR_LOCAL_DROPBOX/some-project.git
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
这两个命令中，第一个是将你本地项目的 .git 目录克隆至本地 Dropbox 对应目录下，并命名为 some-project.git。第二个是创建一个对应于新克隆
目录的远程仓库，命名为 dropbox。这样以后如果需要同步更新 Dropbox 上面的项目，就用 dropbox 来代替前面命令中的 origin。事实上，这
个 remote repository 是定义于 .git/config 文件中的。
\end_layout

\begin_layout Section*
Test
\end_layout

\begin_layout Standard
¥
\end_layout

\begin_layout Section*
Dump
\end_layout

\end_body
\end_document
